type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    }
  learner_created: false
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.AppConstants;
    import cinema.model.SeatManager;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.HashMap;
    import java.util.Map;

    @RestController
    public class CinemaController {

        private final SeatManager seatManager;
        private final ObjectMapper objectMapper;

        @Autowired
        public CinemaController(SeatManager seatManager){
            this.seatManager = seatManager;
            objectMapper = new ObjectMapper();
        }

        @GetMapping("/seats")
        public ResponseEntity<Object> getAvailableSeats() throws JsonProcessingException {
            Map<String, Object> response = new HashMap<>();
            response.put("total_rows", AppConstants.TOTAL_ROWS);
            response.put("total_columns", AppConstants.TOTAL_COLUMNS);
            response.put("available_seats", seatManager.getAvailableSeats());
            String responseJSON = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
            return ResponseEntity.ok().body(response);
        }
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.Objects;

    public class Seat {
        private int row;
        private int column;
        @JsonIgnore
        private boolean available;

        public Seat(int row, int column, boolean available) {
            this.row = row;
            this.column = column;
            this.available = available;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public boolean isAvailable() {
            return available;
        }

        public void setAvailable(boolean available) {
            this.available = available;
        }

        @Override
        public String toString() {
            return "\"row\":" + row +
                    "\n\"column\":" + column;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return row == seat.row && column == seat.column && available == seat.available;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column, available);
        }
    }
  learner_created: false
- name: src/cinema/model/SeatManager.java
  visible: true
  text: |
    package cinema.model;

    import cinema.AppConstants;
    import org.springframework.stereotype.Component;

    import java.util.List;
    import java.util.stream.Collectors;

    @Component
    public class SeatManager {

        private final List<Seat> seats;

        public SeatManager(List<Seat> seats) {
            this.seats = seats;
            for (int i = 1; i <= AppConstants.TOTAL_ROWS; i++){
                for (int j = 1; j <= AppConstants.TOTAL_COLUMNS; j++) {
                    seats.add(new Seat(i, j, true));
                }
            }
        }

        public List<Seat> getAllSeats(){
            return seats;
        }

        public List<Seat> getAvailableSeats() {
            return seats.stream()
                    .filter(Seat::isAvailable)
                    .collect(Collectors.toList());
        }

        public List<Seat> getTakenSeats() {
            return seats.stream()
                    .filter(seat -> !seat.isAvailable())
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/cinema/AppConstants.java
  visible: true
  text: |
    package cinema;

    import org.springframework.stereotype.Component;

    @Component
    public class AppConstants {
        public static int TOTAL_ROWS = 9;
        public static int TOTAL_COLUMNS = 9;
    }
  learner_created: false
- name: src/cinema/response/SeatResponseProvider.java
  visible: true
  text: |
    package cinema.response;

    import cinema.model.SeatManager;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class SeatResponseProvider {

        @Autowired
        private SeatManager seatManager;


    }
  learner_created: false
- name: src/cinema/response/SeatResponseEntity.java
  visible: true
  text: |
    package cinema.response;

    public class SeatResponseEntity {
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest().getMethod() + " " +
                                resp.getRequest().getLocalUri() +
                                " should respond with status code " + status + ", " +
                                "responded: " + resp.getStatusCode() + "\n\n" +
                                "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("available_seats",
                                    isArray(
                                            81,
                                            isObject()
                                                    .value("row", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("column", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("price", isInteger(price -> price == 10 || price == 8))
                                    )
                            )
                            .value("total_columns", 9)
                            .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 1)
                                                    .value("column", 1)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "10",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "10"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "-1",
                            "column", "-1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                    .anyOtherValues()
                    );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 2,
                            "column", 5
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 2)
                                                    .value("column", 5)
                                                    .value("price", 10)
                                    )
                    );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", wrongToken
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = get("/stats").addParams(Map.of()).send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_PASSWORD_MESSAGE)
                            .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = get("/stats").addParams(requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                            .value("current_income", currentIncome)
                            .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", token
                    ))
            ).send();

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 7)
                                            .value("column", 4)
                                            .value("price", 8)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "7",
                            "column", "4"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                    .check(
                            isObject()
                                    .value("token", isString())
                                    .value("ticket",
                                            isObject()
                                                    .value("row", 7)
                                                    .value("column", 4)
                                                    .value("price", 8)
                                    )
                    );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testTokenInvalidation() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            return CheckResult.correct();
        }

        CheckResult testReturnedTicketAvailability() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
                this::testEndpoint,
                this::testEndpointAvailableSeats,
                this::testPurchaseTicket,
                this::testErrorMessageThatTicketHasBeenPurchased,
                this::testErrorMessageThatNumbersOutOfBounds,
                this::testReturnTicket,
                this::testStatsEndpoint,
                () -> testStats(1, 10, 80),
                this::testPurchaseAnotherTicket,
                () -> testStats(2, 18, 79),
                this::returnTicket,
                () -> testStats(1, 10, 80),
                this::testTokenInvalidation,
                this::testReturnedTicketAvailability
        };
    }
  learner_created: false
- name: src/cinema/model/dto/TicketDTO.java
  visible: true
  text: |
    package cinema.model.dto;

    import cinema.model.Ticket;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.UUID;

    public class TicketDTO {
        private UUID token;
        @JsonProperty("ticket")
        private SeatDTO seat;

        public TicketDTO(Ticket ticket) {
            this.token = ticket.getToken();
            this.seat = new SeatDTO(ticket.getSeat());
        }

        public TicketDTO() {}

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public SeatDTO getSeat() {
            return seat;
        }

        public void setSeat(SeatDTO seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/model/RequestToken.java
  visible: true
  text: |
    package cinema.model;

    import java.util.UUID;

    public class RequestToken {
        private UUID token;

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/model/TicketManager.java
  visible: true
  text: |
    package cinema.model;

    import org.springframework.stereotype.Component;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.UUID;


    @Component
    public class TicketManager {
        private Map<UUID, Ticket> tickets;

        public TicketManager() {
            this.tickets = new HashMap<>();
        }

        public Ticket purchaseTicket(Seat seat) {
            Ticket ticket = new Ticket(seat);
            ticket.getSeat().setAvailable(false);
            tickets.put(ticket.getToken(), ticket);
            return ticket;
        }

        public Seat refundTicket(UUID token){
            Seat seat = tickets.get(token).getSeat();
            seat.setAvailable(true);
            tickets.remove(token);
            return seat;
        }

        public boolean containsTicket(UUID token) {
            return tickets.containsKey(token);
        }

    }
  learner_created: true
- name: src/cinema/model/dto/SeatDTO.java
  visible: true
  text: |
    package cinema.model.dto;

    import cinema.model.Seat;

    public class SeatDTO {
        private int row;
        private int column;
        private int price;
        public SeatDTO() {}
        public SeatDTO(Seat seat) {
            this.row = seat.getRow();
            this.column = seat.getColumn();
            this.price = seat.getPrice();
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/model/dto/ReturnedSeatDTO.java
  visible: true
  text: |
    package cinema.model.dto;

    import cinema.model.Seat;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class ReturnedSeatDTO {
        @JsonProperty("returned_ticket")
        private SeatDTO seat;

        public ReturnedSeatDTO(Seat seat) {
            this.seat = new SeatDTO(seat);
        }

        public ReturnedSeatDTO() {}

        public SeatDTO getSeat() {
            return seat;
        }

        public void setSeat(SeatDTO seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    import java.util.Objects;
    import java.util.UUID;

    public class Ticket {
        private UUID token;
        private Seat seat;

        public Ticket(Seat seat) {
            this.token = UUID.randomUUID();
            this.seat = seat;
        }

        public UUID getToken() {
            return token;
        }

        public Seat getSeat() {
            return seat;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Ticket ticket)) return false;
            return Objects.equals(token, ticket.token) && Objects.equals(seat, ticket.seat);
        }

        @Override
        public int hashCode() {
            return Objects.hash(token, seat);
        }
    }
  learner_created: true
- name: src/cinema/exceptions/UnauthorizedAccessException.java
  visible: true
  learner_created: true
- name: src/cinema/model/CinemaStats.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/GlobalExceptionHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 04 Jul 2023 18:21:07 UTC"
record: -1
